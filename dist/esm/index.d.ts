// Generated by dts-bundle-generator v8.0.1

declare const STEPS_STANDARD_KEYS: readonly [
	50,
	100,
	200,
	300,
	400,
	500,
	600,
	700,
	800,
	900,
	950
];
declare const STEPS_FINE_KEYS: readonly [
	50,
	100,
	150,
	200,
	250,
	300,
	350,
	400,
	450,
	500,
	550,
	600,
	650,
	700,
	750,
	800,
	850,
	900,
	950
];
declare const STEPS_COARSE_KEYS: readonly [
	100,
	200,
	300,
	400,
	500,
	600,
	700,
	800,
	900
];
export type Options = {
	steps?: PalettenSteps;
	extend?: readonly number[];
	format?: "hex" | "hsl" | "rgb";
	prefix?: string;
	reversed?: boolean;
	darken?: number;
	lighten?: number;
	saturate?: number;
	desaturate?: number;
	rotate?: number;
	alpha?: number;
	transparentize?: number;
	/** @deprecated Please use 'steps' parameter instead. */
	variant?: PalettenSteps;
};
export type PalettenSteps = "fine" | "standard" | "coarse" | readonly number[];
export type PalettenFunc = <Steps extends PalettenSteps | readonly number[] | undefined = "standard", Extend extends readonly number[] | undefined = undefined, Prefix extends string | undefined = undefined>(value: string | {
	[p in number | string]: string;
}, options?: {
	steps?: Steps;
	extend?: Extend;
	prefix?: Prefix;
} & Omit<Options, "steps" | "extend" | "prefix">) => PalettenData<Steps, Extend, Prefix>;
export type PalettenData<Steps extends PalettenSteps | readonly number[] | unknown = "standard", Extend extends readonly number[] | unknown = [
], Prefix extends string | unknown = unknown> = Prefix extends string ? PalettenDataWithPrefix<Steps, Extend, Prefix> : PalettenDataNonePrefix<Steps, Extend>;
export type PalettenDataWithPrefix<Steps extends PalettenSteps | readonly number[] | unknown, Extend extends readonly number[] | unknown = [
], Prefix extends string = string> = {
	[key in `${Prefix}${PalettenDataVariantKey<Steps, Extend>}` | number]: string;
};
export type PalettenDataNonePrefix<Steps extends PalettenSteps | readonly number[] | unknown, Extend extends readonly number[] | unknown = [
]> = {
	[key in `${PalettenDataVariantKey<Steps, Extend>}`]: string;
};
export type PalettenDataVariantKey<Steps extends PalettenSteps | readonly number[] | unknown, Extend extends readonly number[] | unknown> = Extend extends readonly number[] ? Steps extends "coarse" ? (typeof STEPS_COARSE_KEYS)[number] | Extend[number] : Steps extends "fine" ? (typeof STEPS_FINE_KEYS)[number] | Extend[number] : Steps extends readonly number[] ? Steps[number] | Extend[number] : (typeof STEPS_STANDARD_KEYS)[number] | Extend[number] : Steps extends "fine" ? (typeof STEPS_FINE_KEYS)[number] : Steps extends "coarse" ? (typeof STEPS_COARSE_KEYS)[number] : Steps extends readonly number[] ? Steps[number] : (typeof STEPS_STANDARD_KEYS)[number];
export declare class Paletten {
	config: Options | undefined;
	constructor(commonConfig: Options);
	paletten: (value: string | {
		[x: string]: string;
		[x: number]: string;
	}, options?: Options) => {
		[p: string]: string;
	};
}
export declare const paletten: PalettenFunc;

export {};
